{"version":3,"sources":["pages/Home.tsx","utils/shuffle.ts","components/Gallery.tsx","pages/Aquarelle.tsx","pages/Acrylbilder.tsx","pages/Glueckwunschkarten.tsx","pages/Kerzen.tsx","components/Header.tsx","store/actions.ts","store/reducer.ts","store/sagas.ts","store/store.tsx","components/Footer.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Home","all","this","props","images","items","a","i","length","j","Math","floor","random","shuffle","Object","values","map","slice","reduce","b","photo","original","path","thumbnail","thumbnailPath","getPhotos","autoPlay","Component","connect","state","Gallery","albumId","height","width","ratio","reverse","getThumbnailWidthAndHeight","thumbnailWidth","thumbnailHeight","src","enableImageSelection","Aquarelle","Landscape","availableLinks","title","link","Header","navExpanded","expanded","setState","links","to","key","onSelect","closeNav","bind","NavLink","Navbar","className","expand","onToggle","setNavExpanded","onClick","Brand","Toggle","aria-controls","Collapse","id","Nav","actionTypes","LOAD_IMAGES","INITIAL_PAGE_LOAD","rootReducer","combineReducers","type","payload","data","fetchImages","fetchSaga","put","request","method","url","takeEvery","axiosClients","default","client","axios","create","baseURL","responseType","timeout","history","createBrowserHistory","basename","sagaMiddleware","createSagaMiddleware","middleware","multiClientMiddleware","routerMiddleware","store","createStore","applyMiddleware","run","sagas","Footer","App","Container","style","padding","maxWidth","exact","component","Acrylbilder","Glueckwunschkarten","Kerzen","Boolean","window","location","hostname","match","dispatch","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.4cbcb5eb.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport 'react-image-gallery/styles/css/image-gallery.css';\nimport { ImageData } from '../types';\nimport { RootState } from '../store/store';\nimport { connect } from 'react-redux';\nimport ImageGallery, { ReactImageGalleryItem } from 'react-image-gallery';\nimport shuffle from '../utils/shuffle';\n\nexport interface StateProps {\n  images: ImageData\n}\n\nclass Home extends Component<StateProps> {\n  private getPhotos(): ReactImageGalleryItem[] {\n    const all = this.props.images || {};\n    return shuffle(Object.values(all)\n      .map((images) => images.slice(images.length - 4, images.length))\n      .reduce((a, b) => [...a, ...b], [])\n      .map(photo => ({\n        original: photo.path,\n        thumbnail: photo.thumbnailPath\n      })));\n  }\n\n  render() {\n    return (\n      <div>\n        <ImageGallery items={this.getPhotos()} autoPlay={true}/>\n      </div>\n    );\n  }\n}\n\nexport function mapStateToProps(state: RootState): StateProps {\n  const images = state.images || {};\n  return {\n    images\n  };\n}\n\n\nexport default connect<StateProps, StateProps, RootState>(\n  mapStateToProps\n)(Home);\n","export default function shuffle<T>(items: T[]): T[] {\n  const a = [...items];\n  for (let i = a.length - 1; i > 0; i--) {\n    const j = Math.floor(Math.random() * (i + 1));\n    [a[i], a[j]] = [a[j], a[i]];\n  }\n  return a;\n}","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { RootState } from '../store/store';\nimport { Image, ImageData } from '../types';\n// @ts-ignore\nimport GridGallery from 'react-grid-gallery';\n\nexport interface OuterProps {\n  albumId: string\n}\n\nexport interface StateProps {\n  images: ImageData\n}\n\nclass Gallery extends Component<OuterProps & StateProps> {\n\n  private getPhotos(): Image[] {\n    return this.props.images[this.props.albumId] || [];\n  }\n\n  private getThumbnailWidthAndHeight(photo: Image) {\n    const targetWidth = 320;\n    const targetHeight = 212;\n    const { height, width } = photo;\n    const ratio = height > width ? targetHeight / height : targetWidth / width;\n    return { width: Math.floor(width * ratio), height: Math.floor(height * ratio) };\n  }\n\n  public render() {\n    const albumPhotos: Image[] = this.getPhotos().reverse();\n    const images = albumPhotos.map(photo => {\n      const { width: thumbnailWidth, height: thumbnailHeight} = this.getThumbnailWidthAndHeight(photo);\n      return {\n        src: photo.path,\n        thumbnail: photo.thumbnailPath,\n        thumbnailWidth,\n        thumbnailHeight\n      }\n    });\n\n    return images.length === 0 ? '<p>not found</p>' : <GridGallery images={images} enableImageSelection={false}/>\n  }\n}\n\nexport function mapStateToProps(state: RootState): StateProps {\n  const images = state.images || {};\n  return {\n    images\n  };\n}\n\n\nexport default connect<StateProps, OuterProps, RootState>(\n  mapStateToProps\n)(Gallery);\n","import React from 'react';\nimport Gallery from '../components/Gallery';\n\nconst Aquarelle: React.FC = () => {\n  return (\n    <div>\n      <Gallery albumId=\"Aquarelle\"/>\n    </div>\n  );\n};\n\nexport default Aquarelle;\n","import React from 'react';\nimport Gallery from '../components/Gallery';\n\nconst Landscape: React.FC = () => {\n  return (\n    <div>\n      <Gallery albumId=\"Acrylbilder\"/>\n    </div>\n  );\n};\n\nexport default Landscape;\n","import React from 'react';\nimport Gallery from '../components/Gallery';\n\nconst Landscape: React.FC = () => {\n  return (\n    <div>\n      <Gallery albumId=\"GlÃ¼ckwunschkarten\"/>\n    </div>\n  );\n};\n\nexport default Landscape;\n","import React from 'react';\nimport Gallery from '../components/Gallery';\n\nconst Landscape: React.FC = () => {\n  return (\n    <div>\n      <Gallery albumId=\"Kerzen\"/>\n    </div>\n  );\n};\n\nexport default Landscape;\n","import React, { Component } from 'react';\nimport { Navbar, Nav } from 'react-bootstrap';\nimport { LinkContainer } from 'react-router-bootstrap';\nimport NavLink from 'react-bootstrap/NavLink';\n\nconst availableLinks = [{\n  title: 'Acrylbilder',\n  link: '/acryl'\n}, {\n  title: 'Aquarelle',\n  link: '/aquarelle'\n}, {\n  title: 'Kerzen',\n  link: '/kerzen'\n}, {\n  title: 'Glueckwunschkarten',\n  link: '/glueckwunsch'\n}];\n\ninterface HeaderState {\n  navExpanded: boolean\n}\n\ninterface HeaderProps {\n}\n\nexport default class Header extends Component<HeaderProps, HeaderState> {\n  constructor(props: HeaderProps) {\n    super(props);\n    this.state = {\n      navExpanded: false\n    }\n  }\n\n  private setNavExpanded(expanded: boolean) {\n    this.setState({ navExpanded: expanded });\n  };\n\n  private closeNav() {\n    this.setState({ navExpanded: false });\n  }\n\n  public render() {\n    const links = availableLinks.map(({ title, link }) => {\n      return <LinkContainer to={link} key={link} onSelect={this.closeNav.bind(this)}>\n        <NavLink>{title}</NavLink>\n      </LinkContainer>\n    });\n    return (\n        <Navbar className=\"navbar navbar-dark bg-dark\" expand=\"lg\" onToggle={this.setNavExpanded.bind(this)} expanded={this.state.navExpanded}>\n          <LinkContainer to=\"/\" onClick={this.closeNav.bind(this)}>\n            <Navbar.Brand>Gallery</Navbar.Brand>\n          </LinkContainer>\n          <Navbar.Toggle aria-controls=\"responsive-navbar-nav\"/>\n          <Navbar.Collapse id=\"responsive-navbar-nav\">\n            <Nav className=\"mr-auto\">\n              {links}\n            </Nav>\n          </Navbar.Collapse>\n        </Navbar>\n    );\n  }\n};","export function loadImages() {\n  return {\n    type: actionTypes.LOAD_IMAGES,\n    payload: {\n      request: {\n        method: 'get',\n        url: '/config.json',\n      },\n    },\n  };\n}\n\nexport const actionTypes = {\n  LOAD_IMAGES: 'LOAD_IMAGES',\n  INITIAL_PAGE_LOAD: 'INITIAL_PAGE_LOAD'\n};","import { combineReducers } from 'redux';\nimport { actionTypes } from './actions';\nimport {ImageData} from '../types';\n\ninterface ReducerData {\n  type: string;\n  payload: any\n}\n\nexport function images(state: ImageData = {}, { type, payload }: any) {\n  if (type !== actionTypes.LOAD_IMAGES + '_SUCCESS') {\n    return state;\n  }\n  return (payload.data) as ImageData;\n}\n\nexport const rootReducer = combineReducers({\n  images\n});\n","import { put } from '@redux-saga/core/effects';\nimport { loadImages } from './actions';\nimport { all, takeEvery } from 'redux-saga/effects';\nimport { actionTypes } from './actions';\n\nfunction* fetchImages() {\n  yield put(loadImages());\n}\n\nexport default function* fetchSaga() {\n  yield all([\n    takeEvery(actionTypes.INITIAL_PAGE_LOAD, fetchImages),\n  ]);\n}\n","import { applyMiddleware, createStore } from 'redux';\nimport { rootReducer } from './reducer';\nimport axios from 'axios';\nimport { createBrowserHistory } from 'history';\nimport createSagaMiddleware from 'redux-saga';\nimport { routerMiddleware } from 'connected-react-router';\n// @ts-ignore\nimport { multiClientMiddleware } from 'redux-axios-middleware';\nimport sagas from './sagas';\nimport {ImageData} from '../types';\n\nexport interface RootState {\n  images?: ImageData\n}\n\nconst axiosClients = {\n  default: {\n    client: axios.create({\n      baseURL: \"/\",\n      responseType: 'json',\n      timeout: 20000,\n    }),\n  },\n};\n\nconst history = createBrowserHistory({ basename: '/gallery' });\n\nconst sagaMiddleware = createSagaMiddleware();\n\nconst middleware = [\n  multiClientMiddleware(axiosClients),\n  sagaMiddleware,\n  routerMiddleware(history),\n];\n\nconst store = createStore(rootReducer, applyMiddleware(...middleware));\nsagaMiddleware.run(sagas);\nexport default store;","import React from 'react';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { fa500px, faInstagram, faTwitter, faGithub, IconDefinition } from '@fortawesome/free-brands-svg-icons'\n\ninterface FooterIconProps {\n  icon: IconDefinition,\n  link: string\n}\n\nfunction FooterIcon(props: FooterIconProps) {\n  return <a className=\"footerIcon\" href={props.link} target=\"_blank\" rel=\"noopener noreferrer\">\n    <FontAwesomeIcon icon={props.icon}/>\n  </a>\n}\n\nexport default function Footer() {\n  return <div className=\"footer\">\n    <div>\n    </div>\n    <div className=\"author\">\n      Maria KlaÃ\n    </div>\n  </div>;\n}","import React, { Component } from 'react';\nimport { Provider } from 'react-redux';\nimport { BrowserRouter as Router, Route } from 'react-router-dom'\nimport { Container } from 'react-bootstrap';\n\nimport Home from './pages/Home';\nimport Aquarelle from './pages/Aquarelle';\nimport Acrylbilder from './pages/Acrylbilder';\nimport Glueckwunschkarten from './pages/Glueckwunschkarten';\nimport Kerzen from './pages/Kerzen';\nimport Header from './components/Header';\nimport store from './store/store';\nimport './App.css';\nimport Footer from './components/Footer';\n\nclass App extends Component {\n  render() {\n    const containerStyle = {\n      padding: '10px',\n      maxWidth: '1200px'\n    };\n    return (\n      <Provider store={store}>\n        <div className=\"App\">\n          <div>\n            <Router>\n              <div>\n                <Header/>\n                <Container style={containerStyle}>\n                  <Route exact path=\"/\" component={Home}/>\n                  <Route path=\"/aquarelle\" component={Aquarelle}/>\n                  <Route path=\"/acryl\" component={Acrylbilder}/>\n                  <Route path=\"/glueckwunsch\" component={Glueckwunschkarten}/>\n                  <Route path=\"/kerzen\" component={Kerzen}/>\n                </Container>\n              </div>\n              <Footer/>\n            </Router>\n          </div>\n        </div>\n      </Provider>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport store from './store/store';\nimport { actionTypes } from './store/actions';\n\n(async() => {\n  const type: string = actionTypes.INITIAL_PAGE_LOAD;\n  store.dispatch({ type } as any);\n  ReactDOM.render(<App />, document.getElementById('root'));\n})();\n\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}